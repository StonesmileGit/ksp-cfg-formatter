document = { SOI ~ "\u{FEFF}"? ~ Newline* ~ statement* ~ (Newline | Whitespace)* ~ EOI }

statement = _{ (assignment | node | Comment) ~ (EmptyLine | Newline)? }

openingbracket = { "{" }

closingbracket = { "}" }

node = { nodeBeforeBlock ~ openingbracket ~ nodeBlock ~ closingbracket ~ (Comment | Whitespace+)? }

nodeBeforeBlock = _{ identifier ~ nameBlock? ~ blocks? ~ !blocks ~ index? ~ Comment? ~ Newline? ~ (Whitespace* ~ Comment? ~ Newline)* ~ (Whitespace | Newline)* }

nodeBlock = _{ (Whitespace* ~ Newline)* ~ (Whitespace* ~ statement)* ~ Newline* ~ Whitespace* }

assignment = { identifier ~ arrayIndex? ~ Whitespace? ~ assignmentOperator ~ Whitespace* ~ value ~ Comment? }

identifier = ${ (!(assignmentOperator | "{" | "}" | Newline | "//" | Whitespace | ":" | "[" | "]") ~ ANY) ~ (!(assignmentOperator | "{" | "}" | Newline | "//" | ":" | "[" | "]") ~ ANY)* }

value = ${ (!(Newline | closingbracket | "//") ~ ANY)* }

Comment = ${ Whitespace* ~ "//" ~ (!Newline ~ ANY)* }

Whitespace = _{ "\t" | SPACE_SEPARATOR }

EmptyLine = { Newline ~ Whitespace* ~ (Newline ~ Whitespace*)+ }

Newline = ${ NEWLINE }

assignmentOperator = { ("*" | "/" | "+" | "-" | "!" | "^")? ~ "=" }

nameBlock = { "[" ~ identifier ~ "]" }

// We want there to be a max of 1 of: hasBlock, needsBlock and passBlock, but order does not matter
// ===
blocks = _{ (hasBranch | needsBranch | passBranch) }

hasBranch = _{ hasBlock ~ ((needsBlock ~ passBlock?) | (passBlock ~ needsBlock?))? }

needsBranch = _{ needsBlock ~ ((hasBlock ~ passBlock?) | (passBlock ~ hasBlock?))? }

passBranch = _{ passBlock ~ ((hasBlock ~ needsBlock?) | (needsBlock ~ hasBlock?))? }
// ===

// TODO
// # for key-value
hasBlock = { ^":HAS[" ~ ("#" ~ identifier ~ ("[" ~ identifier ~ hasBlock? ~ "]")?) ~ "]" }

needsBlock = { ^":NEEDS[" ~ modOrClause ~ ("&" ~ modOrClause)* ~ "]" }

modOrClause = { "!"? ~ modName ~ ("|" ~ "!"? ~ modName)* }

passBlock = { firstPassBlock | namedPassBlock | finalPassBlock }

firstPassBlock = { ^":FIRST" }

namedPassBlock = { (^":BEFORE[" | ^":FOR[" | ^":AFTER[" | ^":LAST[") ~ modName ~ "]" }

// TODO: Check actual allowed chars
modName = { (!(Whitespace | "[" | "]" | "&" | "|" | "!") ~ ANY)+ }

finalPassBlock = { ^":FINAL" }

index = { "," ~ ("*" | ASCII_DIGIT+) }

// TODO: ", " after the index
arrayIndex = { "[" ~ ("*" | ASCII_DIGIT+) ~ "]" }
